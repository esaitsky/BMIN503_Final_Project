---
title: "Determining the Utility of TMPRSS2-ERG Fusion Status for Prediction of Disease Aggressiveness"
author: "Evan Saitsky"
format: html
embed-resources: true
editor: visual
---

# Overview

Prostate cancer is the second most common type of cancer in the United States, with an estimated 300,000 new cases in 2024. Despite recent innovations (e.g., radioligand therapeutics, PMSA Imaging), there remains distinct patient-segments with high unmet need due to unique tumor characteristics. Disease aggressiveness, a term that is often ambiguously defined and inconsistently treated in real-world setting, refers to an aggregate blend of patient features that includes prognostic markers (Gleason Score), altered genetic markers (P53, RB, MYC), rapid disease progression, and presence of visceral metastases (cancer that has spread to organs). Within this analysis my goal is to create a clinically actionable definition of ‘aggressive disease’ by integrating prognostic variables to form a compositive score. I will then evaluate whether we can use the presence of a genetic mutation to predict whether a patient will classify as having aggressive disease.

# Introduction

The prostate cancer diagnostic and treatment armamentarium is variable and at times highly complex due evolving US diagnostic guidelines and distinctive treatment patterns amongst HCPs (urologist vs. medical oncologist). Prostate-specific antigen (PSA) testing is a blood test that helps to detect likelihood of disease via rising PSA levels. Despite broad adoption, the effectiveness of PSA as a screening modality is debated, with multiple guidelines changes in recent decades.

-   Prior to 2008, PSA testing was recommended for all men \>50.

-   However, studies demonstrated that \~50 men had to be treated to save one life. The burden of treatment was seen as unnecessarily high, leading to discontinuation of routine testing.

-   With less PSA testing the diagnosis rate of metastatic disease increased. This resulted in a re-evaluation in 2017, with present literature suggesting that men with risk factors such as BRCA mutated, specific minority status, or immediate family histories discuss screening at age 40 – 45.

The Gleason Score (GS) is a pathological grading system used to determine prognosis and to help inform optimal treatment approach. The higher the Gleason Score, the more abnormal the tissue and more likely the cancer will grow quickly. GS is also used in conjunction with clinical stage, serum PSA, and tumor volume to help determine treatment for newly diagnosed patients.

-   The GS score is calculated by rating differentiation amongst the 2 most prevalent tumor patterns on a 1-5 scale, and then summing to find a total composite score out of 10. A GS of 2 – 6 is considered low risk, 7 is considered intermediate risk, and 8 – 10 is considered high risk.

This brings us back to the phrase aggressive disease. Not only do patients with aggressive disease have meaningfully worse health outcomes, but approach to treatment is reliant on early identification and HCP treatment sequencing decisions in prior lines of therapy. Lack of a standard definition further confounds this challenge (e.g., The LATTITUDE and CHAARTED trials used different criteria to define high-risk disease). To address this challenge and improve patient outcomes we must develop a more cohesive definition for aggressive disease and identify clinical variables that can predict aggressiveness. In this analysis I will examine the significance of TMRPSS2-ERG fusion status and determine whether there is predictive capability for disease aggressiveness.

# R Packages

The following packages were read into this project to support data standardization and analysis.

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
#| output: false
library(tidyverse)
library("naniar")
library("mice")
library("factoextra")
library(magrittr)
library(dplyr)
library(caret)
library(randomForest)
library(glmnet)
library("table1")
```

# Methodology

The dataset that I utilized in this project is from the cBioPortal for Cancer Genomics. The cBioPortal is a well-established open-source platform that allows researchers to engage in interactive exploration of cancer genomics data sets (data is curated from \>=350 studies). The data of interest, Prostate Adenocarcinoma (Broad/Cornell, Nat Genet 2012), was generated by Levi Garraway's lab at the Broad Institute and Mark Rubin's lab at Cornell. I was able to evaluate and perform supervised machine learning analyses on the N=123 unique patient samples due to presence of a case/control, which took the form of TMPRSS2-ERG Fusion Status – with \~50% of the patients positive, \~50% negative. To initiate the analysis I had to import the dataset from the cBioPortal. I loaded library("table1") to help create formatted summary tables for the clinical data, which was obtained from cBioPortal in TSV format. From there I used name_repair = "universal_quiet" for naming standardization and syntax alignment. Lastly, I used the rename function to change the name of some of the lengthier column names to make it easier to analyze the data.

There are n=123 rows read in, which represents N=123 unique patient samples from the cBioPortal data.

```{r}
Clinical=read_tsv("prad_broad_clinical_data (2).tsv", name_repair = "universal_quiet")
Clinical = Clinical |>
  rename(Age = Diagnosis.Age, 
         FGA.Status = Fraction.Genome.Altered,
         Prostatectomy.Gleason.Score = Radical.Prostatectomy.Gleason.Score.for.Prostate.Cancer,
         Capra.Score = Modified.Capra.S.Score.Without.Including.Surgical.Margins,
         PSA.Status = Serum.PSA,
         Tumor.Mutation.Burden = TMB..nonsynonymous.)
```

## Assessed Missingness

My next The functionvis_miss was used to determine that the dataset had several missing values.

-   Rows with missing 'age' inputs were excluded from analysis.

-   In situations where FGA status was absent the `mice` library was used to impute the data. FGA was imputed given this variable was identified as a key element for the composite score used to predict aggressiveness of disease.

-   Out of the N=123 original samples, N=112 were ultimately included in the final analysis.

```{r}
## Assess Missingness
vis_miss(Clinical)

Clinical = Clinical |>
  drop_na(Age)

vis_miss(Clinical)

## Going to impute FGA where we have some missingness 
## Installed MICE Library

Clinical.mids = mice(Clinical)
Clinical = complete(Clinical.mids) ## Gives clinical dataframe with 112 obs & 0 missing
```

## Outlier Removal, New Column

-   A single score for tumor mutation burden was removed given representation as an extreme outlier

-   FGA.Status was created as a new column to support data normalization and ease of working with any data variability

```{r}
## Exclude N=1 TMB outlier
Clinical = Clinical |>
  filter(Tumor.Mutation.Burden<=3) |>
  mutate(Log.FGA.Status=log(FGA.Status)) 
## New FGA Column with Imputed Columns
```

## Simplified Representation of TMPRSS2.ERG.Fusion.Status

-   TMPRSS2.ERG.Fusion.Status is represented three ways within the dataset sourced from cBioPortal

    -   Negative

    -   Positive

    -   Positive with interstitial deletion

-   For simplicity purposes in the upfront analysis I changed TMPRSS2.ERG.Fusion.Status to positive or negative, effectively folding the positive with interstitial deletion into the positive cohort.

-   This allows us to nearly have a 50/50 split between patients with a negative vs. positive mutation status.

    -   In subsequent analyses I brought back the three distinct groups for more nuanced insights and preferred predictors.

```{r}
table(Clinical$TMPRSS2.ERG.Fusion.Status)
Clinical=Clinical |>
  mutate(TMPRSS2.Simplified=factor(if_else(TMPRSS2.ERG.Fusion.Status=="Positive with interstitial deletion", 
                                           "Positive", TMPRSS2.ERG.Fusion.Status),
                                   levels = c('Negative', 'Positive')),
         Interstitial.Deletion = factor(if_else(TMPRSS2.ERG.Fusion.Status=="Positive with interstitial deletion",
                                                "Yes", "No"),
                                        levels = c('No', 'Yes')),
         TMPRSS2.Full = factor(if_else(TMPRSS2.ERG.Fusion.Status=="Positive", 
                                       "Positive, no interstitial deletion", TMPRSS2.ERG.Fusion.Status),
                               levels = c('Negative',
                                          'Positive, no interstitial deletion',
                                          'Positive with interstitial deletion')))
```

## Aggregated Radical Prostatectomy Gleason

-   Combined the inputs from Radical Prostatectomy Gleason Score for Prostate Cancer

    -   This combined the two separate numerics and made a single composite score that was easier to compute (e.g., 3 + 4 = 7)

    -   The numerics are referred to as the primary and secondary cancer cell pattern scores

        -   Primary grade: The grade of the largest area of the tumor

        -   Secondary grade: The grade of the second largest area of the tumor

```{r}
Clinical = Clinical |>
  mutate(Tumor.Stage.Binary=str_sub(Tumor.Stage,1,3)) |>
  rowwise() |>
  mutate(Composite.Gleason.Score = eval(parse(text=Prostatectomy.Gleason.Score))) |>
  ungroup()
```

## Patient Demographics: Initial Data Visualization and Exploratory Analysis

-   Demographic overview from available data e.g., age, tumor stage, mutation counts, mutation status, and Capra Score

```{r}
## Density Curve
ggplot(Clinical,aes(x=Age, color=Tumor.Stage.Binary)) + 
  geom_density() + 
  labs(title="Distribution of Age by Tumor Stage")
```

```{r}
##Distribution of patients by age
ggplot(Clinical, aes(x = Age)) +
  geom_histogram(binwidth = 5, fill = "blue", color = "black") +
  labs(title = "Distribution of Patients by Age", x = "Age", y = "Frequency") +
  theme_minimal()

## Distribution of patients by tumor stage
ggplot(Clinical, aes(x = Tumor.Stage)) +
  geom_bar(fill = "orange", color = "black") +
  labs(title = "Distribution of Patients by Tumor Stage", x = "Tumor Stage", y = "Count") +
  theme_minimal()

## Distribution of patients by mutation count 
ggplot(Clinical, aes(x = Mutation.Count)) +
  geom_histogram(binwidth = 2, fill = "purple", color = "black") +
  labs(title = "Distribution of Patients by Mutation Count", x = "Mutation Count (TMB)", y = "Frequency") +
  theme_minimal()

# 4. Distribution of patients with TMPRSS2-ERG fusion status
ggplot(Clinical, aes(x = TMPRSS2.Full)) +
  geom_bar(fill = "green", color = "black") +
  labs(title = "Distribution of Patients by TMPRSS2-ERG Fusion Status", x = "Fusion Status", y = "Count") +
  theme_minimal()

# 5. Distribution of patients with Capra Score
ggplot(Clinical, aes(x = Capra.Score)) +
  geom_bar(fill = "brown", color = "black") +
  labs(title = "Distribution of Patients by Capra Score", x = "Capra Score", y = "Count") +
  theme_minimal()
```

```{r}
## Age by PSA Status Distribution
ggplot(Clinical, aes(x = Age, y = PSA.Status, color=Tumor.Stage.Binary)) +
  geom_point() +
  labs(title = "Distribution of Patients by Age and PSA Stage",
       x = "Age",
       y = "PSA Status",
       color = 'Tumor Stage') +
  theme_minimal() 
```

```{r}
## Age by Tumor Stage Distribution
ggplot(Clinical, aes(x = Age, fill = Tumor.Stage)) +
  geom_histogram(binwidth = 5, position = "dodge", color = "black") +
  labs(title = "Distribution of Patients by Age and Tumor Stage",
       x = "Age",
       y = "Count of Patients") +
  scale_fill_brewer(palette = "Set3", name = "Tumor Stage") +
  theme_minimal()
```

## Composite Score to Define Aggressive Disease

-   **Three variables were combined to create a composite score that represented "aggressive disease"**

    -   The higher the score, the more aggressive the disease
        -   As mentioned in the overview section, aggressive disease ambiguously is defined and inconsistently treated in the real-world setting.
        -   The composite score is intended to capture some of the known variables or patient characteristics used to determine presence of aggressive decision
        -   In a more in-depth analysis, we would ideally have access to additional genetic markers such as P53, RB, and MYC, would understand 1L treatment for mHSPC, time to disease progression, as well as presence of visceral mets. For the purpose of this analysis it is my hope and expectation that having several of the core components will be sufficient to drive predictive accuracy of disease status.

-   **Variables include:**

    -   Radical Prostatectomy Gleason Score: The sum of the two most common Gleason patterns in the tumor. 

    -   Tumor Mutation Burden (TMB): Measurement of the number of mutations in a cancer cell's DNA.

    -   Fraction Genome Altered: Measurement of the percentage of a tumor's chromosomes that have been altered in copy number. 

-   **Performed model splitting (80/20)**

    -   The split ensures the model(s) are trained on one subset of the data and evaluated on another. Intended to prevent over-fitting.

```{r}
## Load GGally, provide extended functionality for ggplot2,
library("GGally")

## Pairwise plot matrix of the three specified variables
ggpairs(Clinical,columns=c("Composite.Gleason.Score","FGA.Status","Tumor.Mutation.Burden"))
```

```{r}
## Composite score with updated FGA to reflect imputed values
ggpairs(Clinical,columns=c("Composite.Gleason.Score","Log.FGA.Status","Tumor.Mutation.Burden"))
```

```{r}
## Performing splitting to support accuracy of model - 80/20 split
## Obtaining testing dataset on which we can perform predictions and determine prediction accuracy
set.seed(1)
clincal_Filtered=Clinical |> filter(Mutation.Count<100)
train.rows = sort(sample(1:nrow(Clinical), size=round(0.8*nrow(Clinical))))
Clinical_Train=Clinical[train.rows,]
Clinical_Test=Clinical[-train.rows,]
```

## Principal Component Analysis (PCA)

-   PCA Goal: Determine how Composite.Gleason.Score, Log.FGA.Status, Tumor.Mutation.Burden clinical variables are related.

    -   Identify variable combinations for use in regression analyses.

-   PC1 explains 52.03% of the variance, PC2 explains 28.63%, and PC3 explains 19.34%.

    -   PC1: All three variables contribute a near equal amount (all negative #s)

    -   PC2: Dominated by Gleason Score

    -   PC3: Reflects the opposing relationship between Log.FGA.Status and Tumor.Mutation.Burden

```{r}
PCA_Results=prcomp(~Composite.Gleason.Score + Log.FGA.Status + Tumor.Mutation.Burden,
       data = Clinical_Train,
       scale.=TRUE)
PCA_Results

##Shows how PCA relates to different variables
fviz_pca_var(PCA_Results)
```

## Bootstrapping

-   Assess stability and variability in PCA score - focus on Clinical_Train (training data)

-   Replicate 5000 times

```{r}
## Bootstrapping
Get_Principal_Component_One=function(data){
bootstrapped_rows=sample(1:nrow(data),replace=TRUE)
  PCA_Results=prcomp(~Composite.Gleason.Score + Log.FGA.Status + Tumor.Mutation.Burden,
       data = data[bootstrapped_rows, ], ## Doing PCA with bootstrapped sample 
       scale.=TRUE)
predict(PCA_Results,newdata = data)[,1] * sign(sum(PCA_Results$rotation[,1]))
 }

### Ensure correlation of higher TMB, FGA, Gleason with more aggressive
##If first PCA is going same direction as gleason, nothing will change. If going opposite direction - becomes negative

## Use replicate to apply PCA 1 Function many times to dataset  
set.seed(13) ## Can be any #
BootstrappedPCA=replicate(5000,Get_Principal_Component_One(Clinical_Train)) 
```

## Plotting Sample of Bootstrapped Analysis

-   Showing histogram distribution of aggressiveness score (N=9 Patient sample)

-   Determining whether higher aggressiveness score corresponds with higher Gleason, TMB, FGA scores

```{r}
BootstrappedPCA |>
  as.data.frame() |>
  set_colnames(1:ncol(BootstrappedPCA)) |>
  mutate(Observation = 1:n(), .before=1) |>
  pivot_longer(cols = -Observation,
               names_to = 'Bootstrap.Iteration',
               values_to = 'PC1') |>
  filter(Observation %in% round(seq(1, 110, length.out=9))) |>
  ggplot(aes(x = PC1)) +
  geom_histogram() +
  facet_wrap(~Observation, nrow=3) +
  theme_minimal() +
  labs(title = 'Bootstrapped sampling distribution of aggressiveness scores',
       subtitle = '9 individuals visualized, 10000 bootstrap replications of PCA')

## 0 represents avg aggress. Computed from Z scores. 2 is more aggressive. Negative repres lower, positive higher. 
```

## Fitting and Building the Models

-   Evaluating whether Use TMRPSS2-ERG fusion status can predict aggressiveness of disease

-   Models used

    1.  Linear Regression

    2.  Lasso

    3.  Random Forest

## Splitting the Data

-   Splitting the data – allows us to evaluate unbiased accuracy of models

-   Created new column called Aggregate Score (Response variable)

-   This allows us to make predictions (Clinical Train vs. Clinical Test)

```{r}
## Need to include PCA Scores we computed in dataframe 
## Split the data -- obtain unbiased accuracy of models

## Adds new column called Agg Score (response variable)
Clinical_Train$Aggressiveness_Score=PCA_Results$x[,1] * sign(sum(PCA_Results$rotation[,1]))

## Enables predictions 
Clinical_Test$Aggressiveness_Score=predict(PCA_Results, newdata=Clinical_Test)[,1] * sign(sum(PCA_Results$rotation[,1]))
```

## Linear Model 1

-   Uses TMRPSS2-ERG fusion status (binary variable) and Age (continuous variable) to predict aggressiveness of disease

```{r}
## Simple LINEAR MODEL 
## Use mutation to test aggress score. Uses  age as control

Simple_OLS <- lm(Aggressiveness_Score ~ TMPRSS2.Simplified + Age, Clinical_Train)
summary(Simple_OLS) 
plot(Simple_OLS)
```

## Linear Model 2

-   Uses TMRPSS2-ERG fusion status (binary variable) and Age (continuous variable) to predict aggressiveness of disease

-   Introduced "\*" to the formula to gauge interaction between variables.

```{r}
## Simple LINEAR REGRESSION MODEL + INTERACTION BTWEN TMPRSS and AGE

Simple_OLS_Interaction <- lm(Aggressiveness_Score ~ TMPRSS2.Simplified * Age, Clinical_Train) 
summary(Simple_OLS_Interaction) ## Showing that neither Age nor Mutation status are statistically significant predictors of aggressivness score when using OLS model
plot(Simple_OLS_Interaction)
```

## Linear Model 3

-   Uses TMRPSS2-ERG fusion status (binary variable) and Age (continuous variable) and Mutation Count (continuous) to predict aggressiveness of disease (Added another variable - Mutation Count)

```{r}
## Complex LINEAR REGRESSION MODEL - evaluates age and mutation account (two variables)
Complex_OLS_Interaction <- lm(Aggressiveness_Score ~ TMPRSS2.Simplified + Age + Mutation.Count, Clinical_Train)  
summary(Complex_OLS_Interaction) 
plot(Complex_OLS_Interaction)
```

## Linear Model 4

-   Uses TMRPSS2-ERG fusion status (binary variable) \* Age (continuous variable) and Mutation Count (continuous) to predict aggressiveness of disease

    -   Added another variable - Mutation Count and introduced "\*" to the formula to gauge interaction between variables

```{r}
## Complex LINEAR REGRESSION MODEL + INTERACTION BTWEN TMPRSS and AGE
Complex_OLS_Interaction <- lm(Aggressiveness_Score ~ TMPRSS2.Simplified * Age + Mutation.Count, Clinical_Train)  
summary(Complex_OLS_Interaction) 
plot(Complex_OLS_Interaction)
```

## Linear Model 5

-   Uses TMRPSS2-ERG fusion status (binary variable) AND Age (continuous variable) and Mutation Count (continuous) AND Capra Score to predict aggressiveness of disease

```{r}
## Complex LINEAR REGRESSION MODEL + INTERACTION BTWEN TMPRSS and AGE and Capra Score
PrefOLS_NoTMPRSS2 <- lm(Aggressiveness_Score ~ Age + Mutation.Count + Capra.Score, Clinical_Train)  
summary(PrefOLS_NoTMPRSS2) 
plot(PrefOLS_NoTMPRSS2)
```

## **Lasso Regression**

-   Linear Regression models indicate that not all predictors are relevant.

    -   Lasso shrinks some coefficients to zero, effectively removing irrelevant predictors.

    -   Creates simpler, more interpretable models by focusing only on the most important predictors.

-   Introducing LASSO to remove non-relevant predictors and overcome any over fitting concerns

```{r}
## LASSO REGRESSION MODEL
x <- model.matrix(~ TMPRSS2.Simplified + Interstitial.Deletion +
                                  Age + Mutation.Count + PSA.Status +
                                  Capra.Score + Tumor.Stage.Binary,
               data = Clinical_Train)[,-1] |>
  scale() |> as.matrix()
y <- Clinical_Train$Aggressiveness_Score

## Fit Lasso with cross-validation
lasso_model <- cv.glmnet(x, y, alpha = 1)
print(lasso_model)

## Get coefficients at optimal lambda
best_lambda <- lasso_model$lambda.min
lasso_coefficients <- coef(lasso_model, s = best_lambda)
print(lasso_coefficients)

lasso_preferred_predictors = c('TMPRSS2.Full',
                               'Age',
                               'Mutation.Count',
                               'Capra.Score')

## Plot cross-validation results
plot(lasso_model)
```

## **Random Forest 1**

-   Uses TMRPSS2-ERG fusion status (binary variable) and Age (continuous variable) to predict aggressiveness of disease

```{r}
## Simple Random Forest Model
set.seed(12509)

Simple_RF <- randomForest(Aggressiveness_Score ~ TMPRSS2.Simplified + Age, data = Clinical_Train)
plot(Simple_RF)
importance(Simple_RF)
varImpPlot(Simple_RF)
```

## **Random Forest 2**

-   Uses TMRPSS2-ERG fusion status (binary variable) and Age (continuous variable) to predict aggressiveness of disease

```{r}
## Complex Random Forest Model
set.seed(12509)

Complex_RF <- randomForest(Aggressiveness_Score ~ TMPRSS2.Simplified + Age + Mutation.Count, data = Clinical_Train)
print(Complex_RF)
plot(Complex_RF)

importance(Complex_RF)
varImpPlot(Complex_RF)

```

## **Random Forest 3**

-   Complex Random Forest + Lasso: this is a Random Forest regression model, built using a set of predictors identified as being preferred through lasso

```{r}
## Complex Random Forest Model + Lasso Preferred Predictors
set.seed(12509)

lasso_preferred_rf <- randomForest(Aggressiveness_Score ~ ., data = Clinical_Train[,c('Aggressiveness_Score', lasso_preferred_predictors)])
print(lasso_preferred_rf)
plot(lasso_preferred_rf)

importance(lasso_preferred_rf)
varImpPlot(lasso_preferred_rf)

```

## Linear Regression Model Using Lasso Preferred Predictors

-   Re-assessed accuracy of Linear Regression Models - took Lasso Preferred Predictors and applied to LR Model

```{r}
lasso_preferred_lm <- lm(Aggressiveness_Score ~ ., data = Clinical_Train[, c('Aggressiveness_Score', lasso_preferred_predictors)])
summary(lasso_preferred_lm)
plot(lasso_preferred_lm)
```

## Generate Predictions for Models

-   Compute prediction performance for each of the data frames mentioned above
    -   Useful metrics are RMSE, MAE, and RSq
    -   Performing on training and testing data (separate data frames)

```{r}
## Generate training predictions
Train_Predictions = Clinical_Train |>
  select(Aggressiveness_Score) |>
  mutate(LASSO_Pref_LM_No_TMPRSS2 = predict(PrefOLS_NoTMPRSS2, newdata = Clinical_Train),
         LASSO_Pref_LM_With_TMPRSS2 = predict(lasso_preferred_lm, newdata = Clinical_Train),
         Simple_Random_Forest = predict(Simple_RF, newdata = Clinical_Train),
         Full_Random_Forest = predict(Complex_RF, newdata = Clinical_Train),
         LASSO_Pref_Random_Forest = predict(lasso_preferred_rf, newdata = Clinical_Train))

## Generate training metrics
Train_Metrics = Train_Predictions |>
  pivot_longer(-Aggressiveness_Score, names_to='Model', values_to='Prediction') |>
  group_by(Model) |>
  summarize(Train_RMSE = sqrt(mean((Aggressiveness_Score-Prediction)^2)),
            Train_MAE = mean(abs(Aggressiveness_Score-Prediction)),
            Train_RSq = cor(Aggressiveness_Score, Prediction)^2) |>
  arrange(Train_RMSE)

## Generate testing predictions
Test_Predictions = Clinical_Test |>
  select(Aggressiveness_Score) |>
  mutate(LASSO_Pref_LM_No_TMPRSS2 = predict(PrefOLS_NoTMPRSS2, newdata = Clinical_Test),
         LASSO_Pref_LM_With_TMPRSS2 = predict(lasso_preferred_lm, newdata = Clinical_Test),
         Simple_Random_Forest = predict(Simple_RF, newdata = Clinical_Test),
         Full_Random_Forest = predict(Complex_RF, newdata = Clinical_Test),
         LASSO_Pref_Random_Forest = predict(lasso_preferred_rf, newdata = Clinical_Test))

## Generate testing metrics
Test_Metrics = Test_Predictions |>
  pivot_longer(-Aggressiveness_Score, names_to='Model', values_to='Prediction') |>
  group_by(Model) |>
  summarize(Test_RMSE = sqrt(mean((Aggressiveness_Score-Prediction)^2)),
            Test_MAE = mean(abs(Aggressiveness_Score-Prediction)),
            Test_RSq = cor(Aggressiveness_Score, Prediction)^2) |>
  arrange(Test_RMSE)
```

```{r}
## Combine train and test metrics
(Combined_Metrics = full_join(Train_Metrics, Test_Metrics, by='Model'))
```

```{r}
## Make column plot of model performance
Combined_Metrics |>
  pivot_longer(-Model, names_to = 'Metric', values_to = 'Value') |>
  separate(Metric, c('Dataset', 'Metric'), sep='_') |>
  filter(Metric != 'RSq') |>
  mutate(Metric = factor(Metric, levels=c('RMSE', 'MAE')),
         Dataset = factor(Dataset, levels=c('Train', 'Test'))) |>
  group_by(Dataset, Metric) |>
  arrange(Value) |>
  mutate(Model = fct_inorder(Model)) |>
  ggplot(aes(y=fct_rev(Model), x=Value, fill=fct_rev(Dataset))) +
  facet_wrap(~Metric) +
  geom_col(position='dodge') +
  labs(title = 'Comparison of Model Predictive Performance',
       y ='', x ='', fill = 'Dataset') +
  scale_fill_discrete(breaks = c('Train', 'Test')) +
  theme_minimal() +
  theme(legend.position = 'top') 
```

# Conclusion

### Overall Finding

The overall analysis has proven the hypothesis false. In other words, TMPRSS2-ERG Fusion Status cannot be used to predict aggressiveness of disease, as defined by the composite score that consists of radical prostatectomy gleason score, fraction genome altered (FGA) score, and tumor mutation burden (TBM).

### Summary

Model accuracy was primarily ascertained using two key metrics – Root mean square deviation (RMSE) and Mean Absolute Error (MAE). RMSE measures the square root of the average squared differences between predictions and actual values whereas MAE measures the average absolute differences between predictions and actual values. In the final histogram you will see turquoise and red bars where we analyze the train versus test data. In this instance the "Train" dataset represents how well the model fits the data and the "test" dataset evaluates performance on unseen data, indicating (and how well the model generalizes). Within the five final models that were chosen for the final comparison and analysis (1- LASSO Pref RF; 2 - Full RF; 3 - LASSO Pref LM + TMPRSS2, 4 - LASSO Pref LM - TMPRSS2; 5 - Simple RF) we viewed considerable variability in predictive performance. Specifically, Models 1 and 2 demonstrate overfitting . A key model of interest LASSO_Pref_LM_No_TMPRSS2 created a more accurate model, which is especially informative given that the LASSO preferred predictors specifically excluded presence of the TMPRSS2 mutation – which we were initially using to determine whether there was an ability to predict aggressiveness of disease.

**Limitations**

Despite being deemed sufficient for the purposes of this project, the sample size included in our analysis (n = 112) is modest. This likely led to a degree of reduced statistical power, increased bias risk, and lower generalizability. Furthermore, the dataset was curated in 2012. The key metrics still hold utility for prostate cancer screening, diagnosis, and prognosis, however we now likely have a more nuanced understanding of the disease (from 12 years ago) and there might be more impactful variables that we could have used to generate the compositive score and/or include in our analysis. Finally, I believe that greater longitudinal visibility into the patient journey might have unlocked new insights regarding treatment decision, impact of therapeutic pressure, and ultimately how this linked back to aggressiveness of disease. The current sample appears somewhat heterogeneous in terms of disease state and decision to evaluate post-prostatectomy.
